[
    {
        "instance_id": "bq011",
        "db": "bigquery-public-data.ga4_obfuscated_sample_ecommerce",
        "question": "How many pseudo users were active in the last 7 days but inactive in the last 2 days as of January 7, 2021?",
        "external_knowledge": "ga4_obfuscated_sample_ecommerce.events.md",
        "plan": "1. Identify pseudo users (`user_pseudo_id`) active in the last 7 days: query the `events_*` tables to find users who were active in the last 7 days based on engagement time and filter them by the fixed timestamp and relevant table suffixes (from `20210101` to `20210107`).\n2. Identify pseudo users (`user_pseudo_id`) active in the last 2 days: query the `events_*` tables to find users who were active in the last 2 days based on engagement time and filter them by the fixed timestamp and relevant table suffixes (from `20210105` to `20210107`).\n3. Combine results and filter:\n- Use a `LEFT JOIN` to combine the two sets of users and filter out users who were active in the last 2 days.\n- Count the distinct user IDs who meet the criteria of being active in the last 7 days but not in the last 2 days.",
        "special_function": [
            "timestamp-functions/TIMESTAMP",
            "timestamp-functions/TIMESTAMP_SUB",
            "timestamp-functions/UNIX_MICROS",
            "other-functions/UNNEST"
        ]
    },
    {
        "instance_id": "bq010",
        "db": "bigquery-public-data.google_analytics_sample",
        "question": "Find the top-selling product among customers who bought 'Youtube Men\u2019s Vintage Henley' in July 2017, excluding itself.",
        "external_knowledge": "google_analytics_sample.ga_sessions.md",
        "plan": "1. Extract a distinct list of customers (`fullVisitorId`) who purchased the \"YouTube Men's Vintage Henley\" in July 2017.\n2. Find other products purchased by these customers in July 2017.\n3. Filter out the \"YouTube Men's Vintage Henley\" product itself and aggregate other products purchased by the same customers.\n4. Sort to find the most purchased product.",
        "special_function": [
            "other-functions/UNNEST"
        ]
    },
    {
        "instance_id": "bq009",
        "db": "bigquery-public-data.google_analytics_sample",
        "question": "Which traffic source receives the top revenue in 2017 and what is the difference (millions, rounded to two decimal places) between its highest and lowest revenue months?",
        "external_knowledge": "google_analytics_sample.ga_sessions.md",
        "plan": "1. Calculate monthly revenue for each traffic source.\n2. Aggregate the monthly revenues to compute the total yearly revenue for each traffic source.\n3. Determine which traffic source has the highest total revenue for the year 2017.\n4. Retrieve the monthly revenue data for the top traffic source identified in the previous step.\n5. Calculate the difference between the highest and lowest monthly revenues for the top traffic source.\n6. Retrieve the traffic source and the revenue difference.",
        "special_function": [
            "date-functions/DATE",
            "date-functions/FORMAT_DATE",
            "date-functions/PARSE_DATE",
            "mathematical-functions/ROUND"
        ]
    },
    {
        "instance_id": "bq001",
        "db": "bigquery-public-data.google_analytics_sample",
        "question": "I wonder how many days between the first transaction and the first visit for each transacting visitor in Feburary 2017, along with the device used in the transaction.",
        "external_knowledge": "google_analytics_sample.ga_sessions.md",
        "plan": "1. Firstly, extract the first visit date for each visitor in the specified range `201702`.\n2. Next, extract the first transaction date for each visitor in Feb 2017.\n3. Then, extract the device categories used for transactions.\n4. Combine the visit, transaction and device data.\n5. Calculate the number of days between the first transaction and the first visit date for each visitor using `DATE_DIFF`.",
        "special_function": [
            "date-functions/DATE",
            "date-functions/DATE_DIFF",
            "date-functions/PARSE_DATE",
            "json-functions/STRING",
            "time-functions/TIME",
            "timestamp-functions/STRING",
            "other-functions/DECLARE",
            "other-functions/UNNEST"
        ]
    },
    {
        "instance_id": "bq002",
        "db": "bigquery-public-data.google_analytics_sample",
        "question": "What's the maximum monthly, weekly, and daily product revenues (in millions) generated by the top-performing traffic source in the first half of 2017?",
        "SQL": "DECLARE start_date STRING DEFAULT '20170101';\nDECLARE end_date STRING DEFAULT '20170630';\n\n-- Step 1: Calculate daily, weekly, and monthly revenues for each traffic source\nWITH daily_revenue AS (\n    SELECT\n        trafficSource.source AS source,\n        date,\n        SUM(productRevenue) / 1000000 AS revenue\n    FROM\n        `bigquery-public-data.google_analytics_sample.ga_sessions_*`,\n        UNNEST (hits) AS hits,\n        UNNEST (hits.product) AS product\n    WHERE\n        _table_suffix BETWEEN start_date AND end_date\n    GROUP BY\n        source, date\n),\nweekly_revenue AS (\n    SELECT\n        source,\n        CONCAT(EXTRACT(YEAR FROM (PARSE_DATE('%Y%m%d', date))), 'W', EXTRACT(WEEK FROM (PARSE_DATE('%Y%m%d', date)))) AS week,\n        SUM(revenue) AS revenue\n    FROM daily_revenue\n    GROUP BY source, week\n),\nmonthly_revenue AS (\n    SELECT\n        source,\n        CONCAT(EXTRACT(YEAR FROM (PARSE_DATE('%Y%m%d', date))),'0', EXTRACT(MONTH FROM (PARSE_DATE('%Y%m%d', date)))) AS month,\n        SUM(revenue) AS revenue\n    FROM daily_revenue\n    GROUP BY source, month\n),\n\n-- Step 2: Determine the top-performing traffic source\ntop_source AS (\n    SELECT source, SUM(revenue) AS total_revenue\n    FROM daily_revenue\n    GROUP BY source\n    ORDER BY total_revenue DESC\n    LIMIT 1\n),\n\n-- Step 3: Calculate maximum revenues for the top-performing traffic source\nmax_revenues AS (\n    (\n      SELECT\n        'Daily' AS time_type,\n        date AS time,\n        source,\n        MAX(revenue) AS max_revenue\n      FROM daily_revenue\n      WHERE source = (SELECT source FROM top_source)\n      GROUP BY source, date\n      ORDER BY max_revenue DESC\n      LIMIT 1\n    )\n\n    UNION ALL\n\n    (\n      SELECT\n        'Weekly' AS time_type,\n        week AS time,\n        source,\n        MAX(revenue) AS max_revenue\n      FROM weekly_revenue\n      WHERE source = (SELECT source FROM top_source)\n      GROUP BY source, week\n      ORDER BY max_revenue DESC\n      LIMIT 1\n    )\n\n    UNION ALL\n\n    (\n      SELECT\n          'Monthly' AS time_type,\n          month AS time,\n          source,\n          MAX(revenue) AS max_revenue\n      FROM monthly_revenue\n      WHERE source = (SELECT source FROM top_source)\n      GROUP BY source, month\n      ORDER BY max_revenue DESC\n      LIMIT 1\n    )\n)\n\n-- Step 4: Select final results\nSELECT\n    time_type,\n    time,\n    source,\n    max_revenue\nFROM max_revenues\nORDER BY time_type, time;",
        "external_knowledge": "google_analytics_sample.ga_sessions.md",
        "plan": "1. Firstly, we define the date range to be the first half of year 2017: 20170101 to 20170630.\n2. Next, calculate daily revenues for each traffic source.\n3. Similarly, calculate weekly and monthly revenues for each traffic source.\n4. Determine the top-performing traffic source through aggregation and sorting.\n5. Calculate the maximum revenues for this traffic source on daily/weekly/monthly basis respectively.\n6. Return the final results.",
        "special_function": [
            "date-functions/DATE",
            "date-functions/EXTRACT",
            "date-functions/PARSE_DATE",
            "datetime-functions/EXTRACT",
            "interval-functions/EXTRACT",
            "json-functions/STRING",
            "string-functions/CONCAT",
            "time-functions/EXTRACT",
            "time-functions/TIME",
            "timestamp-functions/EXTRACT",
            "timestamp-functions/STRING",
            "other-functions/DECLARE",
            "other-functions/UNNEST"
        ]
    },
    {
        "instance_id": "sf014",
        "db": "CENSUS_GALAXY__AIML_MODEL_DATA_ENRICHMENT_SAMPLE.PUBLIC",
        "question": "What is the New York State ZIP code with the highest number of commuters traveling over one hour, according to 2021 ACS data? Include the total commuters, state benchmark for this duration, and state population.",
        "external_knowledge": null,
        "plan": "What is the New York State ZIP code with the highest number of commuters traveling over one hour, according to 2021 ACS data? Include the total commuters, state benchmark for this duration, and state population.",
        "special_function": null
    }
]